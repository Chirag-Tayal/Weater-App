trigger:
  branches:
    include:
      - '*'

pool:
  name: my-pool

variables:
  azure_devops_pat: $(AZURE_DEVOPS_PAT)
  azure_tenant_id: $(AZURE_TENANT_ID)
  azure_subscription_id: $(AZURE_SUBSCRIPTION_ID)
  azure_service_principal_id: $(AZURE_SERVICE_PRINCIPAL_ID)
  azure_service_principal_key: $(AZURE_SERVICE_PRINCIPAL_KEY)

stages:
  - stage: Build
    displayName: 'Build stage'
    jobs:
      - job: Build
        displayName: 'Build job'
        steps:
          - task: TerraformTaskV4@4
            displayName: 'Terraform init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendAzureRmUseEnvironmentVariablesForAuthentication: true
              backendServiceArm: 'tf-service-connection'
              backendAzureRmResourceGroupName: 'react-resources'
              backendAzureRmStorageAccountName: 'tfstoreacc'
              backendAzureRmContainerName: 'prod-tfstate'
              backendAzureRmKey: 'tfstate'

          - task: TerraformTaskV4@4
            displayName: 'Terraform fmt'
            inputs:
              provider: 'azurerm'
              command: 'custom'
              outputTo: 'console'
              customCommand: 'fmt'
              environmentServiceNameAzureRM: 'tf-service-connection'

          - task: TerraformTaskV4@4
            displayName: 'Terraform validate'
            inputs:
              provider: 'azurerm'
              command: 'validate'
              environmentServiceNameAzureRM: 'tf-service-connection'

          - task: TerraformTaskV4@4
            displayName: 'Terraform plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              environmentServiceNameAzureRM: 'tf-service-connection'

          - task: TerraformTaskV4@4
            displayName: 'Terraform apply ----auto-approve'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              commandOptions: '--auto-approve'
              environmentServiceNameAzureRM: 'tf-service-connection'

          - task: SonarCloudPrepare@2
            inputs:
              SonarCloud: 'sonarcloud-conn'
              organization: 'chiragtayal018'
              scannerMode: 'CLI'
              configMode: 'manual'
              projectKey: 'chiragtayal018_Weather_CICD'
              projectName: 'Weather_CICD'
              cliProjectKey: 'chiragtayal018_Weather_CICD'

          - task: NodeTool@0
            inputs:
              versionSpec: '20.x'
            displayName: 'Install Node.js'

          - script: |
              npm install
              npm test -- --watchAll=false
              npm run build
            displayName: 'Install dependencies, run tests, and build'

          - task: SonarCloudAnalyze@2

          - task: CopyFiles@2
            inputs:
              contents: 'build/**'
              targetFolder: '$(Build.ArtifactStagingDirectory)'
            displayName: 'Copy build files'

          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: '$(Build.ArtifactStagingDirectory)'
              artifactName: 'drop'
            displayName: 'Publish build artifacts'

  - stage: Deploy
    displayName: 'Deploy stage'
    dependsOn: Build
    jobs:
      - job: Deploy
        displayName: 'Deploy job'
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: 'drop'
              targetPath: '$(Pipeline.Workspace)/drop'
            displayName: 'Download Build Artifacts'

          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'tf-service-connection'
              appName: 'accuweatherstat'
              package: '$(Pipeline.Workspace)/drop/build'
              appType: 'webApp'
            displayName: 'Deploy to Azure Web App'